Questions
1. How can your implementation be optimized?
	An optimization would be to not use my "Run In Editor" option because although it is set up just fine and works as intended, it is never ideal to run a lot of scene processes or updates while in editor and calls for components to hold variable when not in play mode. Its a cool feature that works on this small project but would not be ideal for larger applications with more aspects to keep in mind, although these editor and inspector scripts can really help automate a lot of developer processes too. 
	Move everything to a positive quadrant so none of my calculations have to consider negatives or offsets due to negative values.



2. How much time did you spend on your implementation?

About 2 hours for goal 1-4
1 hour for XML documentation
2 hours for Optimizing finding nearest
1.5 for Unity Testing setup
Less than an hour for key press additions and Read/Write file for restoring on laucnh
1 hour for Dependency Injection


3. What was most challenging for you?
	The real challange I faced was optimizing the nearest algorithm away from doing so many distance calculations. My solution was to put each scene object into a 2d array where the position in the array relates to the int x and z position of the object so that the player only needs to search nearby items within that array for the distance calculation instead of doing that for every object.

	Another fun challeng I faced was allowing the user to change the color in edit mode and have them reflected in the scene immedietaly, even when in Edit mode and not in Play mode, for the fourth goal function. I was not sure if the exercise called for the scene to update immedietly or just allow the designer to change the color then and it update on play, but it was a fun challenge to have it update regardless of Play/Edit. This allowed me to work through running updates on object even when in Edit mode which brought on a lot of situations where things could go wrong. The dependency injection helped my scene get ready for the dependecies used in this situation and for unity Testing. Also the Scene Objects list had to be managed regardless of play mode. 


4. What else would you add to this exercise?
	I would add pushing and merging to the repo at every step so the process can be viewed instead of just the end product. A lot of optimizations I originally listed above I ended up incorperating later in the process.